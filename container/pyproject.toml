[project]
name = "RDE_XRD"
version = "1.0"


[tool.flake8]
max-line-length = 250
ignore = "W503,I201,E203"
exclude = ".venv,.git,__pycache__,__init__.py"

[tool.isort]
profile = "black"

[tool.mypy]
allow_redefinition = true
allow_untyped_globals = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = true
implicit_reexport = false
ignore_missing_imports = true
no_implicit_optional = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
warn_return_any = true
show_error_context = true
show_column_numbers = true
pretty = true
show_error_codes = true
show_traceback = true
color_output = true
error_summary = true
exclude = ["tests"]

[tool.ruff]
line-length = 1000
lint.select = [
    "F",    # pyflakes
    "E",    # pycodestyle
    "W",    # pycodestyle warnings
    "I",    # isort
    "D",    # pydocstyle
    "N",    # pep8-naming
    "PL",   # Pylint,
    "C90",  # mccabe
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
]
lint.ignore = [
    "D100",
    "D101",
    "D104",
    "D105",
    "D107",
    "N805",
    "PLR0913",
    "S307",
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ANN204",
    "ANN401",
    "BLE001",
]
exclude = [
    "bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tests",
    "stubs",
]

[tool.coverage.run]
omit = ["tests/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]
